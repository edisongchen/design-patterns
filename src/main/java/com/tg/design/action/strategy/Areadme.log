策略模式 strategy pattern 定义一组算法，并将每个算法都封装起来，并且它们之间
可以互换
包含三大角色
1 Context 角色
  上下文角色，起承上启下封装作用，屏蔽高层模块策略，算法的直接访问。封装可能存在的变化
2 Strategy 抽象策略角色
  通常为接口，定义每个策略或算法必须具有的方法或属性
3 ConcreteStrategy 具体策略角色
  实现抽象策略类的具体操作，包含具体的算法

实际上就是面向对象的继承和多态

多态：相同引用指向不同对象具有不同行为

优点：
1 算法可以自由切换
2 避免了多重条件判断
3 扩展性良好

缺点：
1 策略数量增多，每个策略就是一个类
2 所有策略都要对外暴露，然后才能决定使用哪一个策略（TODO 可以使用 工厂模式，代理模式，享元模式 增强）


/*************注意：当策略超过4个时，就要考虑使用混合模式**********************/
策略模式的加强扩展
输入三个参数，进行加减运算，不考虑其它情况。如何做



